{"version":3,"sources":["../src/toJSON.js"],"names":["Children","toJSON","component","element","_currentElement","renderedChildren","_renderedChildren","props","children","jsonChildren","Object","keys","map","key","child","getHostComponentFromComposite","object","type","name","includeSerializable","defineProperty","value","Symbol","obj","Array","isArray","result","item","jsonItem","undefined","push","constructor","$className","inst","_renderedNodeType","ReactNodeTypes","COMPOSITE","_renderedComponent","HOST","EMPTY"],"mappings":"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","sourcesContent":["import { Children } from 'react';\n\n/**\n * Converts both ExtReact and DOM components to json for Jest snapshots\n * @param {React.Component} component\n * @returns {Object}\n */\nexport default function toJSON(component) {\n    const element = component._currentElement;\n    const renderedChildren = component._renderedChildren;\n    if (typeof element === 'string') return element;\n    const { children, ...props } = element.props;\n    let jsonChildren = null;\n\n    if (typeof children === 'string') {\n        // inner text\n        jsonChildren = [children];\n    } else if (renderedChildren) {\n        // child components\n        jsonChildren = Object.keys(renderedChildren).map(key => {\n            let child = renderedChildren[key];\n            child = getHostComponentFromComposite(child) || child;\n            return child.toJSON ? child.toJSON() : toJSON(child);\n        })\n    }\n\n    const object = {\n        type: typeof element.type === 'string' ? element.type : element.type.name,\n        props: includeSerializable(props),\n        children: jsonChildren\n    };\n\n    Object.defineProperty(object, '$$typeof', {\n        value: Symbol['for']('react.test.json')\n    });\n\n    return object;\n}\n\n/**\n * Returns an object containing only the serializable keys from the source object.\n * @param {Object} obj The source object\n * @returns {Object}\n */\nfunction includeSerializable(obj) {\n    if (Array.isArray(obj)) {\n        const result = [];\n\n        for (let item of obj) {\n            if (typeof item === 'object') {\n                const jsonItem = includeSerializable(item);\n\n                if (jsonItem !== undefined) {\n                    result.push(jsonItem);\n                }\n            } else {\n                result.push(item);\n            }\n        }\n\n        return result;\n    } else if (typeof obj === 'object') {\n        if (obj.constructor !== Object) {\n            // include only the class name for complex objects\n            return { $className: obj.$className || obj.constructor.name || 'unknown' };\n        }\n\n        const result = { };\n\n        for (let key in obj) {\n            result[key] = includeSerializable(obj[key]);\n        }\n\n        return result;\n    } else {\n        return obj;\n    }\n}\n\n// borrowed from react-test-renderer\n\n/**\n * Gets the inner ExtReact or DOM component from the specified component\n * @param {React.Component} inst A component instance\n * @returns {React.Component}\n */\nfunction getHostComponentFromComposite(inst) {\n    var type;\n\n    while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {\n        inst = inst._renderedComponent;\n    }\n\n    if (type === ReactNodeTypes.HOST) {\n        return inst._renderedComponent;\n    } else if (type === ReactNodeTypes.EMPTY) {\n        return null;\n    }\n}\n\nexport const ReactNodeTypes = {\n    HOST: 0,\n    COMPOSITE: 1,\n    EMPTY: 2\n};"],"file":"toJSON.js"}