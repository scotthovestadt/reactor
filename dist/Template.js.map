{"version":3,"sources":["../src/Template.js"],"names":["ReactDOM","ReactDOMServer","Ext","window","Template","define","extend","constructor","fn","apply","values","renderToStaticMarkup","doInsert","where","el","returnElement","target","getCachedTarget","doRender","dom","firstChild","result","Helper","unmountChildrenOnRemove","overwrite","getDom","Element","cachedTarget","document","createElement","reactElement","render","parent","parentNode","parentKey","targetKey","observer","MutationObserver","mutations","forEach","removedNodes","i","length","node","unmountComponentAtNode","observe","childList"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\n\nconst Ext = window.Ext;\n\n/**\n * A implementation of Ext.Template that supports React elements (JSX).\n * \n * Usage:\n * \n *  const tpl = new Template(data => (\n *      <div>\n *          <div>{data.firstName} {data.lastName}</div>\n *          <div>{data.title}</div>\n *      </div>\n *  ))\n * \n *  const html = tpl.apply({ firstName: 'Joe', lastName: 'Smith', title: 'CEO' });\n */\nconst Template = Ext.define(null, {\n    extend: 'Ext.Template', \n\n    /**\n     * @param {Function} fn A function that takes data values as an object and returns a React.Element to be rendered.\n     */\n    constructor(fn) {\n        this.fn = fn;\n    },\n\n    // overrides Ext.Template\n    apply(values) {\n        return ReactDOMServer.renderToStaticMarkup(this.fn(values));\n    },\n\n    // overrides Ext.Template\n    doInsert(where, el, values, returnElement) {\n        const target = this.getCachedTarget();\n        this.doRender(values, target);\n        const dom = target.firstChild;\n        const result = Ext.dom.Helper.doInsert(el, dom, returnElement, where);\n        this.unmountChildrenOnRemove(dom);\n        return result;\n    },\n\n    // overrides Ext.Template\n    overwrite(el, values, returnElement) {\n        const dom = Ext.getDom(el);\n        const result = this.doRender(values, dom);\n        this.unmountChildrenOnRemove(dom);\n        return returnElement ? new Ext.Element(dom) : dom;\n    },\n\n    /**\n     * @private\n     * @return {HTMLElement}\n     */\n    getCachedTarget() {\n        if (!this.cachedTarget) this.cachedTarget = document.createElement('div');\n        return this.cachedTarget;\n    },\n\n    /**\n     * Renders the result of this.fn to the specified target\n     * @private\n     * @param {Object} values Values to pass to this.fn\n     * @param {HTMLElement} target The element into which the result should be rendered.\n     * @return {HTMLElement} The newly rendered element\n     */\n    doRender(values, target) {\n        const reactElement = this.fn(values);\n        ReactDOM.render(reactElement, target);\n        return target.firstChild;\n    },\n\n    /**\n     * Ensures that componentWillUnmount is called on each descendent component when the target node is removed from the DOM.\n     * @param {Node} target A node containing a React tree\n     */\n    unmountChildrenOnRemove(target) {\n        const parent = target.parentNode;\n        const parentKey = '$extreactObserveRemoveChild';\n        const targetKey = '$extreactUnmountOnRemove';\n        target[targetKey] = true; // we tag the target with $extreactUnmountOnRemove so we know it has a React tree to unmount when removed\n\n        if (!parent[parentKey]) { // we tag the parent with $extreactObserveRemoveChild so we can ensure we are only observing it once\n            parent[parentKey] = true;\n\n            const observer = new MutationObserver(mutations => {\n                mutations.forEach(({ removedNodes }) => {\n                    for (let i=0; i<removedNodes.length; i++) {\n                        let node = removedNodes[i];\n\n                        if (node[targetKey]) {\n                            ReactDOM.unmountComponentAtNode(node); // Unmount the React tree when the target dom node is removed.\n                        }\n                    }\n                })\n            });\n            \n            observer.observe(parent, { childList: true });\n        }\n    }\n});\n\nexport default Template;\n\n// Hook Ext.XTemplate.get so that we can just pass a function that returns JSX in place of a XTemplate.\n\n"],"file":"Template.js"}